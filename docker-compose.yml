version: "3.7"

services:
  postgres:
    image: postgres:11.7-alpine
    restart: always
    volumes:
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: cp_helper
      POSTGRES_DB: cp_helper
      POSTGRES_USER: cp_helper       
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cp_helper"]
      interval: 10s
      timeout: 5s
      retries: 5

  cp-helper-backend:
    build:
      dockerfile: Dockerfile
      context: ./backend
    depends_on:
      - kafka
    restart: always
    ports:
      - "9999:9999"

  cp-helper-frontend:
    build:
      dockerfile: Dockerfile
      context: ./frontend
    restart: always
    ports:
      - "3000:3000"
    links:
      - cp-helper-backend

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      SA_PASSWORD: cp_helper3A!
      ACCEPT_EULA: Y
      MSSQL_AGENT_ENABLED: "true"
    ports:
      - "1433:1433"
    volumes:
      - ./backend/scripts/crm_analytics_db:/scripts
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-U", "sa", "-p", "$${SA_PASSWORD}", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - /bin/bash
      - -c
      - |
        # Launch MSSQL and send to background
        /opt/mssql/bin/sqlservr &
        # Wait for it to be available
        echo "Waiting for MS SQL to be available ⏳"
        /opt/mssql-tools/bin/sqlcmd -l 30 -S localhost -h-1 -V1 -U sa -P $$SA_PASSWORD -Q "SET NOCOUNT ON SELECT \"YAY WE ARE UP\" , @@servername"
        is_up=$$?
        while [ $$is_up -ne 0 ] ; do
          echo -e $$(date)
          /opt/mssql-tools/bin/sqlcmd -l 30 -S localhost -h-1 -V1 -U sa -P $$SA_PASSWORD -Q "SET NOCOUNT ON SELECT \"YAY WE ARE UP\" , @@servername"
          is_up=$$?
          sleep 5
        done
        # Wait for MS SQL Server Agent to be available
        echo "Waiting for MS SQL Server Agent to be available ⏳"
        /opt/mssql-tools/bin/sqlcmd -l 30 -S localhost -h-1 -V1 -U sa -P $$SA_PASSWORD -Q "SET NOCOUNT ON SELECT COUNT(*) FROM master.dbo.sysprocesses WHERE program_name = \"SQLAgent - Generic Refresher\""
        is_agent_up=$$?
        while [ $$is_agent_up -ne 0 ] ; do
          echo -e $$(date)
          /opt/mssql-tools/bin/sqlcmd -l 30 -S localhost -h-1 -V1 -U sa -P $$SA_PASSWORD -Q "SET NOCOUNT ON SELECT COUNT(*) FROM master.dbo.sysprocesses WHERE program_name = \"SQLAgent - Generic Refresher\""
          is_agent_up=$$?
          sleep 5
        done
        # Exec Scripts
        scripts=(
          CreateDatabases
          CRMData750
          ActivationAnalysisData
          VacancyDataMart
          InsertInTheTables
          CreateCompetitorsReportJob
        )
        for script in "$${scripts[@]}"; do
          /opt/mssql-tools/bin/sqlcmd -U sa -P $$SA_PASSWORD -l 30 -e -i /scripts/$$script.sql
        done
        # So that the container doesn't shut down, sleep this thread
        sleep infinity

  zoo:
    image: confluentinc/cp-zookeeper:${CONFLUENT_VERSION}
    container_name: zoo
    environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    container_name: kafka
    depends_on:
      - zoo
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zoo:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-connect:
    image: confluentinc/cp-kafka-connect:${CONFLUENT_VERSION}
    container_name: kafka-connect
    depends_on:
      - kafka
      - mssql
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_PORT: 8083
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: /usr/share/java
    volumes:
      - ./backend/kafka-connect-jdbc/jars:/usr/share/java/kafka-connect-jdbc/jars
      - ./backend/kafka-connect-jdbc/connectors:/tmp/connectors
    command:
      - bash
      - -c
      - |
        /etc/confluent/docker/run &
        echo "Waiting for Kafka Connect to start listening on kafka-connect ⏳"
        while : ; do
          curl_status=$$(curl -s -o /dev/null -w %{http_code} http://kafka-connect:8083/connectors)
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$curl_status " (waiting for 200)"
          if [ $$curl_status -eq 200 ] ; then
            break
          fi
          sleep 5
        done
        echo -e "\n--\n+> Creating Kafka Connector(s)"
        curl -X POST -H "Content-Type:application/json" http://kafka-connect:8083/connectors/ -d @./tmp/connectors/crm_competitor_report-source.json
        sleep infinity
